{"name":"Interprocess","tagline":"A Win32 Inter-process Communication (IPC) library","body":"interprocess\r\n============\r\n\r\nA Win32 Inter-process Communication (IPC) library\r\n\r\nBuilding\r\n-----------------------\r\nopen [vsproject/ipc.sln](vsproject/ipc.sln) with Visual Studio 2013, and build \r\n\r\nExample\r\n-----------------------\r\nClient:\r\n\r\n```cpp\r\n// client.cc\r\n#include <ppltasks.h>\r\n#include <algorithm>\r\n#include <string>\r\n#include \"interprocess/client.h\"\r\n#include \"interprocess/connection.h\"\r\n\r\nvoid OnMessage(\r\n  const interprocess::ConnectionPtr& conn, const std::string& msg) {\r\n  static int i = 0;\r\n  printf(\"[%d]: %s\\n\", i++, msg.c_str());\r\n}\r\n\r\nvoid OnException(interprocess::Client* c, const std::exception_ptr& eptr) {\r\n  try {\r\n    if (eptr) {\r\n      std::rethrow_exception(eptr);\r\n    } else {\r\n      c->Connection()->Send(c->Name());\r\n      c->Connection()->Send(\"abcdefghijklmnopqrstuvwxyz\");\r\n    }\r\n  } catch (const std::exception& e) {\r\n    printf(\"Caught exception \\\"%s\\\"\\n\", e.what());\r\n  }\r\n}\r\n\r\nvoid InThread() {\r\n  auto name = std::to_string(std::this_thread::get_id().hash());\r\n  auto client = interprocess::Client(name);\r\n  client.SetMessageCallback(OnMessage);\r\n  client.SetExceptionCallback(\r\n    std::bind(OnException, &client, std::placeholders::_1));\r\n  if (client.Connect(\"mynamedpipe\", 1000)) {\r\n    auto response = client.Connection()->TransactMessage(\"async & wait\");\r\n    printf(\"TransactMessage response: %s\\n\", response.c_str());\r\n    std::this_thread::sleep_for(std::chrono::seconds(1));\r\n    client.Connection()->Send(client.Name());\r\n    client.Connection()->Send(\"abcdefghijklmnopqrstuvwxyz\");\r\n    std::this_thread::sleep_for(std::chrono::seconds(1));\r\n    client.Stop();\r\n  }\r\n}\r\n\r\nint main() {\r\n  Concurrency::task_group tasks;\r\n  int count = 10;\r\n  while (count--) {\r\n    tasks.run(std::function<void()>(InThread));\r\n  }\r\n  tasks.wait();\r\n  return 0;\r\n}\r\n```\r\nServer:\r\n```cpp\r\nserver.cc\r\n#include <thread>\r\n#include <string>\r\n#include \"interprocess/server.h\"\r\n#include \"interprocess/connection.h\"\r\n\r\nvoid OnMessage(\r\n  const interprocess::ConnectionPtr& conn, const std::string& msg) {\r\n  static int i = 0;\r\n  printf(\"[%d]: %s\\n\", i++, msg.c_str());\r\n  conn->Send(msg);\r\n}\r\n\r\nint main() {\r\n  auto server = interprocess::Server(\"mynamedpipe\");\r\n  server.SetMessageCallback(OnMessage);\r\n  server.Listen();\r\n  std::this_thread::sleep_for(std::chrono::hours(30));\r\n  server.Broadcast(\"0\");\r\n  server.Stop();\r\n  return 0;\r\n}\r\n```\r\n\r\nLicense\r\n-----------------------\r\nCopyright (c) 2014 bitdewy@gmail.com\r\n\r\nDistributed under the Boost Software License, Version 1.0, unless otherwise noted.\r\n(See accompanying file [LICENSE_1_0.txt](LICENSE_1_0.txt) or copy at [http://www.boost.org/LICENSE_1_0.txt](http://www.boost.org/LICENSE_1_0.txt))\r\n\r\n*Note: Excluding Google cpplint.py. The Google cpplint.py license see accompanying file [cpplint/README](cpplint/README).*\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/bitdewy/interprocess/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}